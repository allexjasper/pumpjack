cmake_minimum_required(VERSION 3.10)
cmake_policy(SET CMP0074 NEW)
project(pumpjack VERSION 1.0 LANGUAGES CXX)

set(CMAKE_SYSTEM_IGNORE_PATH "C:/Program Files/GNU Octave/Octave-9.1.0/mingw64")
set(CMAKE_IGNORE_PATH "C:/Program Files/GNU Octave/Octave-9.1.0/mingw64")


# Set SDL2 directories
set(SDL2_DIR "C:/local/SDL2-2.28.4")
set(SDL2_INCLUDE_DIRS "${SDL2_DIR}/include")
set(SDL2_LIB_DIRS "${SDL2_DIR}/lib/x64")

# Manually specify SDL2 libraries
set(SDL2_LIBRARIES
    "${SDL2_LIB_DIRS}/SDL2.lib"
    "${SDL2_LIB_DIRS}/SDL2main.lib"
)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Add the path to custom modules (if any)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# Set paths for dependencies (adjust paths according to your setup)
set(BOOST_ROOT "C:/local/boost_1_83_0")
set(BOOST_LIBRARYDIR "C:/local/boost_1_83_0/lib64-msvc-14.3")
set(BOOST_INCLUDEDIR C:/local/boost_1_83_0/boost)
set(SDL2_DIR "C:/local/SDL2-2.28.4/cmake")
set(LIBUSB_ROOT "C:/local/libusb-1.0.26")
set(LIBUSB_ROOT_LIB "C:/local/libusb-1.0.26-binaries/VS2015-x64/lib/libusb-1.0 (static)")
#set(GLM_INCLUDE_DIR "C:/local/libusb-1.0.26-binaries/VS2015-x64/lib/libusb-1.0 (static)")
set(GLEW_ROOT "C:/local/glew-2.2.0")
set(GLEW_INCLUDE_DIRS "C:/local/glew-2.2.0/include")
set(GLEW_LIBRARIES "C:/local/glew-2.2.0/lib/Release/x64")


set(Boost_USE_STATIC_LIBS ON)  # or OFF if you're using dynamic libraries
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)  # Typically OFF for MSVC


# Find Boost
find_package(Boost REQUIRED COMPONENTS system filesystem log_setup log program_options regex)

# Find SDL2
find_package(SDL2 REQUIRED)

# Find libusb
find_path(LIBUSB_INCLUDE_DIR NAMES libusb-1.0/libusb.h PATHS ${LIBUSB_ROOT})
find_library(LIBUSB_LIBRARY NAMES libusb-1.0 PATHS ${LIBUSB_ROOT_LIB})
if (LIBUSB_INCLUDE_DIR AND LIBUSB_LIBRARY)
    set(LIBUSB_FOUND TRUE)
    set(LIBUSB_INCLUDE_DIRS ${LIBUSB_INCLUDE_DIR})
    set(LIBUSB_LIBRARIES ${LIBUSB_LIBRARY})
else ()
    message(FATAL_ERROR "libusb not found")
endif ()

# Find GLM
set(GLM_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/external/glm")
find_path(GLM_INCLUDE_DIR NAMES glm/glm.hpp)
if (GLM_INCLUDE_DIR)
    set(GLM_FOUND TRUE)
    set(GLM_INCLUDE_DIRS ${GLM_INCLUDE_DIR})
else ()
    message(FATAL_ERROR "GLM not found")
endif ()

# Find GLI
set(GLI_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/external/gli")
find_path(GLI_INCLUDE_DIR NAMES gli/gli.hpp PATHS ${GLI_INCLUDE_DIR})
if (GLI_INCLUDE_DIR)
    set(GLI_FOUND TRUE)
    set(GLI_INCLUDE_DIRS ${GLI_INCLUDE_DIR})
    message(STATUS "Found GLI: ${GLI_INCLUDE_DIR}")
else ()
    message(FATAL_ERROR "GLI not found")
endif ()

# Set path for manually downloaded GLI
set(GLI_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/external/gli")
if (EXISTS "${GLI_INCLUDE_DIR}/gli.hpp")
    set(GLI_FOUND TRUE)
    set(GLI_INCLUDE_DIRS ${GLI_INCLUDE_DIR})
else ()
    message(FATAL_ERROR "GLI not found in ${GLI_INCLUDE_DIR}")
endif ()

# Find GLEW
find_package(GLEW REQUIRED)

# Find Boost
find_package(Boost REQUIRED COMPONENTS system filesystem log_setup log program_options regex)


# Include directories
include_directories(
    ${Boost_INCLUDE_DIRS}
    ${SDL2_INCLUDE_DIRS}
    ${LIBUSB_INCLUDE_DIRS}
    ${GLM_INCLUDE_DIRS}
    ${GLI_INCLUDE_DIRS}
    ${GLEW_INCLUDE_DIRS}
    ${CMAKE_SOURCE_DIR}/src/include
)



# Add source files
file(GLOB_RECURSE SOURCES "${CMAKE_SOURCE_DIR}/src/*.cpp")

# Add executable
add_executable(${PROJECT_NAME} ${SOURCES})

set_target_properties(pumpjack PROPERTIES
    LINK_FLAGS "/SUBSYSTEM:CONSOLE"
)



link_directories(${BOOST_LIBRARYDIR})

# Link libraries
target_link_libraries(${PROJECT_NAME}
    Boost::boost
    Boost::log_setup
    Boost::log
    Boost::system
    Boost::filesystem
    Boost::program_options
    Boost::regex
    SDL2::SDL2
    ${LIBUSB_LIBRARIES}
    GLEW::GLEW
    opengl32  
    # GLM and GLI are header-only libraries, no linking needed
)

# Installation rules
install(TARGETS ${PROJECT_NAME} DESTINATION bin)
install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/include/ DESTINATION include)
